A cryptosystem is unconditionally or information-theoretically secure if it cannot be broken even with infinite computational resources.
Unconditional security is based on information theory and assumes no limit on
the attacker’s computational power. This looks like a pretty straightforward definition. It is in fact straightforward, but the requirements for a cipher to be unconditionally secure are tremendous. Let’s look at it using a gedankenexperiment: Assume we have a symmetric encryption algorithm (it doesn’t matter whether it’s a
block cipher or stream cipher) with a key length of 10,000 bits, and the only attack
that works is an exhaustive key search, i.e, a brute-force attack. From the discussion
in Sect. 1.3.2, we recall that 128 bits are more than enough for long-term security.
So, is a cipher with 10,000 bits unconditionally secure? The answer is simple: No!
Since an attacker can have infinite computational resources, we can simply assume
that the attacker has 210000 computers available and every computer checks exactly
one key. This will give us a correct key in one time step. Of course, there is no way
that 210000 computer can ever be built, the number is too large. (It is estimated that

2.2 Random Numbers and an Unbreakable Stream Cipher

37

there are “only” about 2266 atoms in the known universe.) The cipher would merely
be computationally secure but not unconditionally.
All this said, we now show a way to build an unconditionally secure cipher that
is quite simple. This cipher is called the One-Time Pad.
Definition 2.2.2 One-Time Pad (OTP)
A stream cipher for which
1. the key stream s0 , s1 , s2 , . . . is generated by a true random number generator, and
2. the key stream is only known to the legitimate communicating
parties, and
3. every key stream bit si is only used once
is called a one-time pad. The one-time pad is unconditionally secure.
It is easy to show why the OTP is unconditionally secure. Here is a sketch of a
proof. For every ciphertext bit we get an equation of this form:
y0 ≡ x0 + s0 mod 2
y1 ≡ x1 + s1 mod 2
..
.
Each individual relation is a linear equation modulo 2 with two unknowns. They
are impossible to solve. If the attacker knows the value for y0 (0 or 1), he cannot
determine the value of x0 . In fact, the solutions x0 = 0 and x0 = 1 are exactly equally
likely if s0 stems from a truly random source and there is 50% chance that it has the
value 0 and 1. The situation is identical for the second equation and all subsequent
ones. Note that the situation is different if the values si are not truly random. In this
case, there is some functional relationship between them, and the equations shown
above are not independent. Even though it might still be hard to solve the system of
equations, it is not provably secure!
So, now we have a simple cipher which is perfectly secure. There are rumors
that the red telephone between the White House and the Kremlin was encrypted
using an OTP during the Cold War. Obviously there must be a catch since OTPs are
not used for Web browsers, e-mail encryption, smart cards, mobile phones, or other
important applications. Let’s look at the implications of the three requirements in
Defintion 2.2.2. The first requirement means that we need a TRNG. That means we
need a device, e.g., based on white noise of a semiconductor, that generates truly
random bits. Since standard PCs do not have TRNG, this requirement might not be
that convenient but can certainly be met. The second requirement means that Alice
has to get the random bits securely to Bob. In practice that could mean that Alice
burns the true random bits on a CD ROM and sends them securely, e.g., with a
trusted courier, to Bob. Still doable, but not great. The third requirement is probably Stream Ciphers.

Stream Ciphers

the most impractical one: Key stream bits cannot be re-used. This implies that we
need one key bit for every bit of plaintext. Hence, our key is as long as the plaintext!
This is probably the major drawback of the OTP. Even if Alice and Bob share a CD
with 1 MByte of true random numbers, we run quickly into limits. If they send a
single email with an attachment of 1 MByte, they could encrypt and decrypt it, but
after that they would need to exchange a true random key stream again.
For these reasons OTPs are rarely used in practice. However, they give us a great
design idea for secure ciphers: If we XOR truly random bits and plaintext, we get
ciphertext that can certainly not be broken by an attacker. We will see in the next
section how we can use this fact to build practical stream ciphers.

des.
trng.

Des is synonym of DataEncryptionStandard.
trng is synonym of TrueRandomNumberGenerators.

AdvancedEncryptionStandard is an alternative to Des.

Aes is alternative to Des.

aes is synonym of AdvancedEncryptionStandard.

DSA is synonym of DataStructuresAlgorithms.
DataStructuresAlgorithms is synonym of DSA.

TRNG is synonym of TrueRandomNumberGenerators.

AdvancedEncryptionStandard is an alternative to des.

aes is synonym of AdvancedEncryptionStandard.

2.2.3 Towards Practical Stream Ciphers
In the previous section we saw that OTPs are unconditionally secure, but that they
have drawbacks which make them impractical. What we try to do with practical
stream ciphers is to replace the truly random key stream bits by a pseudorandom
number generator where the key k serves as a seed. The principle of practical stream


Fig. 2.5 Practical stream ciphers

Before we turn to stream ciphers used in the real world, it should be stressed that
practical stream ciphers are not unconditionally secure. In fact, all known practical
crypto algorithms (stream ciphers, block ciphers, public-key algorithms) are not
unconditionally secure. The best we can hope for is computational security, which
we define as follows:
Definition 2.2.3 Computational Security
A cryptosystem is computationally secure if the best known algorithm for breaking it requires at least t operations.

2.2 Random Numbers and an Unbreakable Stream Cipher

39

This seems like a reasonable definition, but there are still several problems with
it. First, often we do not know what the best algorithm for a given attack is. A
prime example is the RSA public-key scheme, which can be broken by factoring
large integers. Even though many factoring algorithms are known, we do not know
whether there exist any better ones. Second, even if a lower bound on the complexity
of one attack is known, we do not know whether any other, more powerful attacks
are possible. We saw this in Sect. 1.2.2 during the discussion about the substitution
cipher: Even though we know the exact computational complexity for an exhaustive
key search, there exist other more powerful attacks. The best we can do in practice
is to design crypto schemes for which it is assumed that they are computationally
secure. For symmetric ciphers this usually means one hopes that there is no attack
method with a complexity better than an exhaustive key search.
Let’s go back to Fig. 2.5. This design emulates (“behaves like”) a one-time pad.
It has the major advantage over the OTP that Alice and Bob only need to exchange a
secret key that is at most a few 100 bits long, and that does not have to be as long as
the message we want to encrypt. We now have to think carefully about the properties
of the key stream s0 , s1 , s2 , . . . that is generated by Alice and Bob. Obviously, we
need some type of random number generator to derive the key stream. First, we note
that we cannot use a TRNG since, by definition, Alice and Bob will not be able to
generate the same key stream. Instead we need deterministic, i.e., pseudorandom,
number generators. We now look at the other two generators that were introduced
in the previous section.

Building Key Streams from PRNGs
Here is an idea that seems promising (but in fact is pretty bad): Many PRNGs possess good statistical properties, which are necessary for a strong stream cipher. If
we apply statistical tests to the key stream sequence, the output should pretty much
behave like the bit sequence generated by tossing a coin. So it is tempting to assume
that a PRNG can be used to generate the key stream. But all of this is not sufficient
for a stream cipher since our opponent, Oscar, is smart. Consider the following attack:
Example 2.2. Let’s assume a PRNG based on the linear congruential generator:
S0 = seed
Si+1 ≡ A Si + B mod m, i = 0, 1, . . .
where we choose m to be 100 bits long and Si , A, B ∈ {0, 1, . . . , m − 1}. Note that this
PRNG can have excellent statistical properties if we choose the parameters carefully.
The modulus m is part of the encryption scheme and is publicly known. The secret
key comprises the values (A, B) and possibly the seed S0 , each with a length of 100.
That gives us a key length of 200 bit, which is more than sufficient to protect against
a brute-force attack. Since this is a stream cipher, Alice can encrypt:

40

2 Stream Ciphers

yi ≡ xi + si mod 2
where si are the bits of the binary representation of the PRNG output symbols S j .
But Oscar can easily launch an attack. Assume he knows the first 300 bits of
plaintext (this is only 300/8=37.5 byte), e.g., file header information, or he guesses
part of the plaintext. Since he certainly knows the ciphertext, he can now compute
the first 300 bits of key stream as:
si ≡ yi + xi mod m , i = 1, 2, . . . , 300
These 300 bits immediately give the first three output symbols of the PRNG: S1 =
(s1 , . . . , s100 ), S2 = (s101 , . . . , s200 ) and S3 = (s201 , . . . , s300 ). Oscar can now generate
two equations:
S2 ≡ A S1 + B mod m
S3 ≡ A S2 + B mod m
This is a system of linear equations over Zm with two unknowns A and B. But those
two values are the key, and we can immediately solve the system, yielding:
A ≡ (S2 − S3 )/(S1 − S2 ) mod m
B ≡ S2 − S1 (S2 − S3 )/(S1 − S2 ) mod m
In case gcd((S1 −S2 ), m)) = 1 we get multiple solutions since this is an equation system over Zm . However, with a fourth piece of known plaintext the key can uniquely
be detected in almost all cases. Alternatively, Oscar simply tries to encrypt the message with each of the multiple solutions found. Hence, in summary: if we know a
few pieces of plaintext, we can compute the key and decrypt the entire ciphertext!

This type of attack is why the notation of CSPRNG was invented.

Building Key Streams from CSPRNGs
What we need to do to prevent the attack above is to use a CSPRNG, which assures
that the key stream is unpredictable. We recall that this means that given the first n
output bits of the key stream s1 , s2 , . . . , sn , it is computationally infeasible to compute the bits sn+1 , sn+2 , . . .. Unfortunately, pretty much all pseudorandom number
generators that are used for applications outside cryptography are not cryptographically secure. Hence, in practice, we need to use specially designed pseudorandom
number generators for stream ciphers.
The question now is how practical stream ciphers actually look. There are many
proposals for stream ciphers out in the literature. They can roughly be classified as
ciphers either optimized for software implementation or optimized for hardware implementation. In the former case, the ciphers typically require few CPU instructions

2.3 Shift Register-Based Stream Ciphers

41

to compute one key stream bit. In the latter case, they tend to be based on operations
which can easily be realized in hardware. A popular example is shift registers with
feedback, which are discussed in the next section. A third class of stream ciphers
is realized by using block ciphers as building blocks. The cipher feedback mode,
output feedback mode and counter mode to be introduced in Chap. 5 are examples
of stream ciphers derived from block ciphers.
It could be argued that the state-of-the-art in block cipher design is more advanced than stream ciphers. Currently it seems to be easier for scientists to design
“secure” block ciphers than stream ciphers. Subsequent chapters deal in great detail
with the two most popular and standardized block ciphers, DES and AES.

2.3 Shift Register-Based Stream Ciphers
As we have learned so far, practical stream ciphers use a stream of key bits s1 , s2 , . . .
that are generated by the key stream generator, which should have certain properties.
An elegant way of realizing long pseudorandom sequences is to use linear feedback
shift registers (LFSRs). LFSRs are easily implemented in hardware and many, but
certainly not all, stream ciphers make use of LFSRs. A prominent example is the
A5/1 cipher, which is standardized for voice encryption in GSM. As we will see,
even though a plain LFSR produces a sequence with good statistical properties, it
is cryptographically weak. However, combinations of LFSRs, such as A5/1 or the
cipher Trivium, can make secure stream ciphers. It should be stressed that there
are many ways for constructing stream ciphers. This section only introduces one of
several popular approaches.

2.3.1 Linear Feedback Shift Registers (LFSR)
An LFSR consists of clocked storage elements (flip-flops) and a feedback path. The
number of storage elements gives us the degree of the LFSR. In other words, an
LFSR with m flip-flops is said to be of degree m. The feedback network computes
the input for the last flip-flop as XOR-sum of certain flip-flops in the shift register.
Example 2.3. Simple LFSR We consider an LFSR of degree m = 3 with flip-flops
FF2 , FF1 , FF0 , and a feedback path as shown in Fig. 2.6. The internal state bits are
denoted by si and are shifted by one to the right with each clock tick. The rightmost
state bit is also the current output bit. The leftmost state bit is computed in the
feedback path, which is the XOR sum of some of the flip-flop values in the previous
clock period. Since the XOR is a linear operation, such circuits are called linear
feedback shift registers. If we assume an initial state of (s2 = 1, s1 = 0, s0 = 0),
Table 2.2 gives the complete sequence of states of the LFSR. Note that the rightmost
column is the output of the LFSR. One can see from this example that the LFSR

42

2 Stream Ciphers

















Fig. 2.6 Linear feedback shift register of degree 3 with initial values s2 , s1 , s0
Table 2.2 Sequence of states of the LFSR
clk
0
1
2
3
4
5
6
7
8

FF2 FF1 FF0 = si
1
0
0
0
1
0
1
0
1
1
1
0
1
1
1
0
1
1
0
0
1
1
0
0
0
1
0

starts to repeat after clock cycle 6. This means the LFSR output has period of length
7 and has the form:
0010111 0010111 0010111 . . .
There is a simple formula which determines the functioning of this LFSR. Let’s
look at how the output bits si are computed, assuming the initial state bits s0 , s1 , s2 :
s3 ≡ s1 + s0 mod 2
s4 ≡ s2 + s1 mod 2
s5 ≡ s3 + s2 mod 2
..
.
In general, the output bit is computed as:
si+3 ≡ si+1 + si mod 2
where i = 0, 1, 2, . . .

This was, of course, a simple example. However, we could already observe many
important properties. We will now look at general LFSRs.

2.3 Shift Register-Based Stream Ciphers

43

A Mathematical Description of LFSRs
The general form of an LFSR of degree m is shown in Fig. 2.7. It shows m flip-flops
and m possible feedback locations, all combined by the XOR operation. Whether a
feedback path is active or not, is defined by the feedback coefficient p0 , p1 , . . . , pm−1 :



If pi = 1 (closed switch), the feedback is active.
If pi = 0 (open switch), the corresponding flip-flop output is not used for the
feedback.

With this notation, we obtain an elegant mathematical description for the feedback
path. If we multiply the output of flip-flop i by its coefficient pi , the result is either
the output value if pi = 1, which corresponds to a closed switch, or the value zero if
pi = 0, which corresponds to an open switch. The values of the feedback coefficients
are crucial for the output sequence produced by the LFSR.
















Fig. 2.7 General LFSR with feedback coefficients pi and initial values sm−1 , . . . , s0

Let’s assume the LFSR is initially loaded with the values s0 , . . . , sm−1 . The next
output bit of the LFSR sm , which is also the input to the leftmost flip-flop, can be
computed by the XOR-sum of the products of flip-flop outputs and corresponding
feedback coefficient:
sm ≡ sm−1 pm−1 + · · · + s1 p1 + s0 p0 mod 2
The next LFSR output can be computed as:
sm+1 ≡ sm pm−1 + · · · + s2 p1 + s1 p0 mod 2
In general, the output sequence can be described as:
si+m ≡

m−1

∑ p j · si+ j mod

2;

si , p j ∈ {0, 1}; i = 0, 1, 2, . . .

(2.1)

j=0

Clearly, the output values are given through a combination of some previous output
values. LFSRs are sometimes referred to as linear recurrences.

44

2 Stream Ciphers

Due to the finite number of recurring states, the output sequence of an LFSR repeats periodically. This was also illustrated in Example 2.3. Moreover, an LFSR can
produce output sequences of different lengths, depending on the feedback coefficients. The following theorem gives us the maximum length of an LFSR as function
of its degree.
Theorem 2.3.1 The maximum sequence length generated by an
LFSR of degree m is 2m − 1.
It is easy to show that this theorem holds. The state of an LFSR is uniquely determined by the m internal register bits. Given a certain state, the LFSR deterministically assumes its next state. Because of this, as soon as an LFSR assumes a previous
state, it starts to repeat. Since an m-bit state vector can only assume 2m − 1 nonzero
states, the maximum sequence length before repetition is 2m − 1. Note that the allzero state must be excluded. If an LFSR assumes this state, it will get “stuck” in
it, i.e., it will never be able to leave it again. Note that only certain configurations
(p0 , . . . , pm−1 ) yield maximum length LFSRs. We give a small example for this below.
Example 2.4. LFSR with maximum-length output sequence
Given an LFSR of degree m = 4 and the feedback path (p3 = 0, p2 = 0, p1 =
1, p0 = 1), the output sequence of the LFSR has a period of 2m − 1 = 15, i.e., it
is a maximum-length LFSR.

Example 2.5. LFSR with non-maximum output sequence
Given an LFSR of degree m = 4 and (p3 = 1, p2 = 1, p1 = 1, p0 = 1), then the output
sequence has period of 5; therefore, it is not a maximum-length LFSR. 
The mathematical background of the properties of LFSR sequences is beyond
the scope of this book. However, we conclude this introduction to LFSRs with some
additional facts. LFSRs are often specified by polynomials using the following notation: An LFSR with a feedback coefficient vector (pm−1 , . . . , p1 , p0 ) is represented
by the polynomial
P(x) = xm + pm−1 xm−1 + . . . + p1 x + p0
For instance, the LFSR from the example above with coefficients (p3 = 0, p2 =
0, p1 = 1, p0 = 1) can alternatively be specified by the polynomial x4 + x + 1.
This seemingly odd notation as a polynomial has several advantages. For instance,
maximum-length LFSRs have what is called primitive polynomials. Primitive polynomials are a special type of irreducible polynomial. Irreducible polynomials are
roughly comparable with prime numbers, i.e., their only factors are 1 and the
polynomial itself. Primitive polynomials can relatively easily be computed. Hence,
maximum-length LFSRs can easily be found. Table 2.3 shows one primitive polynomial for every value of m in the range from m = 2, 3, . . . , 128. As an example,

2.3 Shift Register-Based Stream Ciphers

The Elliptic Curve Digital Signature Algorithm (ECDSA)
As discussed in Chap. 9, elliptic curves have several advantages over RSA and
over DL schemes like Elgamal or DSA. In particular, in absence of strong attacks
against elliptic curve cryptosystems (ECC), bit lengths in the range of 160–256 bit
can be chosen which provide security equivalent to 1024–3072-bit RSA and DL
schemes. The shorter bit length of ECC often results in shorter processing time and
in shorter signatures. For these reasons, the Elliptic Curve Digital Signature Algorithm (ECDSA) was standardized in the US by the American National Standards
Institute (ANSI) in 1998.

Electronic Signatures in Global and National Commerce Act, United States of America

Digital signatures provide message integrity, message authentication and nonrepudiation.
One of the main application areas of digital signatures is certificates.
RSA is currently the most widely used digital signature algorithm. Competitors
are the Digital Signature Standard (DSA) and the Elliptic Curve Digital Signature
Standard (ECDSA).
The Elgamal signature scheme is the basis for DSA. In turn, ECDSA is a generalization of DSA to elliptic curves.
RSA verification can be done with short public keys. Hence, in practice, RSA
verification is usually faster than signing.
DSA and ECDSA have the advantage over RSA in that the signatures are much
shorter.
In order to prevent certain attacks, RSA should be used with padding.
The modulus of DSA and the RSA signature schemes should be at least 1024bits long. For true long-term security, a modulus of length 3072 bits should be
chosen. In contrast, ECDSA achieves the same security levels with bit lengths in
the range 160–256 bits.

des
trng
des is synonym of DataEncryptionStandard.
trng is synonym of TrueRandomNumberGenerators.
AdvancedEncryptionStandard is an alternative to des.
aes is synonym of AdvancedEncryptionStandard.

Dedicated Hash Functions: The MD4 Family
Dedicated hash functions are algorithms that have been custom designed. A large
number of such constructions have been proposed over the last two decades. In practice, by far the most popular ones have been the hash functions of what is called the
MD4 family. MD5, the SHA family and RIPEMD are all based on the principles of
MD4. MD4 is a message digest algorithm developed by Ronald Rivest. MD4 was
an innovative idea because it was especially designed to allow very efficient software implementation. It uses 32-bit variables, and all operations are bitwise Boolean
functions such as logical AND, OR, XOR and negation. All subsequent hash functions in the MD4 family are based on the same software-friendly principles.
A strengthened version of MD4, named MD5, was proposed by Rivest in 1991.
Both hash functions compute a 128-bit output, i.e., they possess a collision resistance of about 264 . MD5 became extremely widely used, e.g., in Internet security
protocols, for computing checksums of files or for storing of password hashes. There
were, however, early signs of potential weaknesses. Thus, the US NIST published a
new message digest standard, which was coined the Secure Hash Algorithm (SHA),
in 1993. This is the first member of the SHA family and is officially called SHA,
even though it is nowadays commonly referred to as SHA-0. In 1995, SHA-0 was
modified to SHA-1. The difference between the SHA-0 and SHA-1 algorithms lies
in the schedule of the compression function to improve its cryptographic security.
Both algorithms have an output length of 160 bit. In 1996, a partial attack against
MD5 by Hans Dobbertin led to more and more experts recommending SHA-1 as a
replacement for the widely used MD5. Since then, SHA-1 has gained wide adoption
in numerous products and standards.
In the absence of analytical attacks, the maximum collision resistance of SHA0 and SHA-1 is about 280 , which is not a good fit if they are used in protocols
together with algorithms such as AES, which has a security level of 128–256 bits.
Similarly, most public-key schemes can offer higher security levels, for instance,
elliptic curves can have security levels of 128 bits if 256 bits curves are used. Thus,
in 2001 NIST introduced three more variants of SHA-1: SHA-256, SHA-384 and
SHA-512, with message digest lengths of 256, 384 and 512 bits, respectively. A
further modification, SHA-224, was introduced in 2004 in order to fit the security
level of 3DES. These four hash functions are often referred to as SHA-2.
In 2004, collision-finding attacks against MD5 and SHA-0 where announced by
Xiaoyun Wang. One year later it was claimed that the attack could be extended to
SHA-1 and it was claimed that a collision search would take 263 steps, which is
considerably less than the 280 achieved by the birthday attack. Table 11.2 gives an
overview of the main parameters of the MD4 family.
In Section 11.4 we will learn about the internal functioning of SHA-1, which is
to date—despite its potential weakness—the most widely deployed hash function.
At this point we would like to note that finding a collision does not necessarily
mean that the hash function is insecure in every situation. There are many applications for hash functions, e.g., key derivation or storage of passwords, where only
